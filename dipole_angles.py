# coding: utf-8
import sys
sys.path.append('.')
import os

import json

from pydmga.geometry import OrthogonalGeometry
from pydmga.container import Container
from pydmga.diagram import Diagram
from pydmga.io import pdb
from pydmga.io import helper
import traceback

from pydmga.draw import assets
from pydmga.draw import render
from pydmga.draw.render import Asset
from pydmga.draw.render import Color

from math import pi
from math import sqrt
from math import cos
from math import sin
from math import acos
from math import asin

import numpy as np

###############################################################
# REAL SCRIPT STARTS HERE #####################################
###############################################################

# TODO: Dipol angle (lists per time + sensowny histogram)
# TODO: Save layer as a .ndx file (each frame as a single group?), to be able to recover layers
# TODO: save neighbours list in TXT readable file for later analysis and/or speed up?
# TODO: rethink computation of following layers by providing .ndx file (one entry per frame), so that
#       we can use .ndx files generated by one run for base molecules to compute next layers
#       in case of a single group in .ndx use it for all frames (handy for base molecules around which water flows)

# # IMPORT SETTINGS
# # WE WILL USE THEM IN FUNCTIONS?
if (len(sys.argv) < 2):
	print "Computes distribution of dipole angles around the molecules."
	print "NOTE: Requires running compute3d.py first."
	print ""
	print "Usage: python dipole_angles.py [path.to.conf]"
	print ""
	print "  [path.to.conf] is a python module path to a file containing configuration.";
	print "                 see sample files in jobs/* for reference."
	sys.exit(-1)

job = helper.Job(sys.argv, app="dipole_angles")

molecules = {
	'chol': {
		'def': {
			'lo': 1,
			'up': 74,
			'plane_atoms_ids': [9, 18, 35],
			# we fit consecutive MOLECULES of this type to this atoms 
			# we want:
			# a) all atoms on the same plane
			# b) line from plane_atoms_ids[1] to plane_atoms_ids[2] on time t-1 be on the line at t )
			# c) position of plane_atoms_ids[2] on t-1 the same as in t)
		},
	},
}
try: molecules = job.settings.MOLECULES; 
except: job.log("# WARNING: using default MOLECULES (CHOL) = {}\n".format(str(molecules)))

for key, moldata in molecules.iteritems():
	if "ndx" not in moldata:
		if "def" in moldata:
			moldata["ndx"] = list(range(moldata['def']["lo"], moldata['def']["up"] + 1))
		else:
			raise Exception("You must specify either 'def' or 'ndx' for '{}' in settings.".format(key))

	if "dipole_ndx" not in moldata:
		moldata["dipole_ndx"] = moldata["ndx"]

# generate as many analysis files as there are different kinds of molecules in the setup
for molecule_key in molecules:		
	angles_analys_file = job.user_file("{molecule_key}_{app}_dipole_angle_analys.dat", {"molecule_key": molecule_key})
	angles_analys_file.write(job.info)
	angles_analys_file.write("# LEGEND: \n")
	angles_analys_file.write("# time frame              obvious\n")
	angles_analys_file.write("# avg,std,min,max[angle]  statistics on the dipole angle for that time\n")
	angles_analys_file.write("# \n")
	angles_analys_file.write("# This file was generated for job '{}' and molecule: '{}'\n".format(job.jobname, molecule_key))
	angles_analys_file.write("# \n")
	angles_analys_file.write("# Header numbers for help in gnuplot! \n")
	angles_analys_file.write("# 1    2     3        4        5        6       \n")
	angles_analys_file.write("# time frame avgangle stdangle minangle maxangle\n")	
	molecules[molecule_key]['angles_analys_file'] = angles_analys_file	

	distances_analys_file = job.user_file("{molecule_key}_{app}_dipole_distances_analys.dat", {"molecule_key": molecule_key})
	distances_analys_file.write(job.info)
	distances_analys_file.write("# LEGEND: \n")
	distances_analys_file.write("# time frame              obvious\n")
	distances_analys_file.write("# avg,std,min,max[dist]   statistics on the distance to dipole partners for that time\n")
	distances_analys_file.write("# \n")
	distances_analys_file.write("# This file was generated for job '{}' and molecule: '{}'\n".format(job.jobname, molecule_key))
	distances_analys_file.write("# \n")
	distances_analys_file.write("# Header numbers for help in gnuplot! \n")
	distances_analys_file.write("# 1    2     3       4       5       6      \n")
	distances_analys_file.write("# time frame avgdist stddist mindist maxdist\n")	
	molecules[molecule_key]['distances_analys_file'] = distances_analys_file	

	distances_more_analys_file = job.user_file("{molecule_key}_{app}_dipole_distances_more_analys.dat", {"molecule_key": molecule_key})
	distances_more_analys_file.write(job.info)
	distances_more_analys_file.write("# LEGEND: \n")
	distances_more_analys_file.write("# time frame              obvious\n")
	distances_more_analys_file.write("# avg,std,min,max[dist]   statistics on the distance to dipole partners for that time\n")
	distances_more_analys_file.write("# \n")
	distances_more_analys_file.write("# This file was generated for job '{}' and molecule: '{}'\n".format(job.jobname, molecule_key))
	distances_more_analys_file.write("# \n")
	distances_more_analys_file.write("# Header numbers for help in gnuplot! \n")
	distances_more_analys_file.write("# 1    2     3       4       5       6      \n")
	distances_more_analys_file.write("# time frame avgdist stddist mindist maxdist\n")	
	molecules[molecule_key]['distances_more_analys_file'] = distances_more_analys_file	

	angles_details_file = job.user_file("{molecule_key}_{app}_dipole_angle_details.tjson", {"molecule_key": molecule_key})
	molecules[molecule_key]['angles_details_file'] = angles_details_file

	closest_dist_details = job.user_file("{molecule_key}_{app}_closest_dist_details.tjson", {"molecule_key": molecule_key})
	molecules[molecule_key]['closest_dist_details'] = closest_dist_details	

water_molecules_file = file(job.filepath("compute3d_water_molecules.json"), mode="r")
water_molecules = json.load(water_molecules_file)
water_molecules_file.close()


# def remade_dict_with_int_keys(in_dct):
# 	return dict( ((int(key), value) for key, value in in_dct.iteritems()) )


for molecule_key, moldata in molecules.iteritems():	
	positions_file = file(job.filepath("compute3d_positions.tjson"), mode="r")
	water_neighbours_file = file(job.filepath("{molecule_key}_compute3d_water_neighbours.tjson", {"molecule_key": molecule_key}), mode="r")
	frame = 0
	for water_nb_line in water_neighbours_file:
		this_frame_angles = []
		this_frame_distances = []
		this_frame_distances_more = []		
		positions_line = positions_file.readline()
		time, waters = water_nb_line.strip().split(" ", 1)
		_, positions = positions_line.strip().split(" ", 1)
		positions = json.loads(positions)
		waters = json.loads(waters)
		for oxg_id, nb_list in waters.iteritems():
			# this_water = water_molecules[oxg_id]
			selected = []
			for other_id, (dist, area) in nb_list.iteritems():
				if int(other_id) in moldata["dipole_ndx"]:
					selected.append((dist, other_id))
					this_frame_distances_more.append(dist)

			(dist, other_id) = sorted(selected)[0]
			this_frame_distances.append(dist)
			p_w_oxg = np.array(positions[oxg_id])
			v_dipol = 0.5 * (np.array(positions[str(int(oxg_id) + 1)]) + np.array(positions[str(int(oxg_id) + 2)])) - p_w_oxg
			u_other = np.array(positions[other_id]) - p_w_oxg
			v_dipol = v_dipol / np.linalg.norm(v_dipol)
			u_other = u_other / np.linalg.norm(u_other)
			vu = np.dot(v_dipol, u_other)  # -1 to 1 value
			this_frame_angles.append(acos(vu))			

		moldata["angles_analys_file"].write("{} {} {} {} {} {}\n".format(
			time,
			frame,
			np.mean(this_frame_angles),
			np.std(this_frame_angles),
			min(this_frame_angles),
			max(this_frame_angles),
		))

		moldata["distances_analys_file"].write("{} {} {} {} {} {}\n".format(
			time,
			frame,
			np.mean(this_frame_distances),
			np.std(this_frame_distances),
			min(this_frame_distances),
			max(this_frame_distances),
		))		

		moldata["distances_more_analys_file"].write("{} {} {} {} {} {}\n".format(
			time,
			frame,
			np.mean(this_frame_distances_more),
			np.std(this_frame_distances_more),
			min(this_frame_distances_more),
			max(this_frame_distances_more),
		))						

		moldata["angles_details_file"].write("{} {}\n".format(time, json.dumps(this_frame_angles)))
		moldata["closest_dist_details"].write("{} {}\n".format(time, json.dumps(this_frame_distances)))

	water_neighbours_file.close()
	positions_file.close()

job.finish("Finished normally")